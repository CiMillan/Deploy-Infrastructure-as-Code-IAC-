Description:
    Cintia Millan / Udacity 2020
    Udagram Project

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    ImageId:
        Description: Provides the unique ID of the Amazon Machine Image (AMI) that was assigned during registration
        Type: String

    InstanceType:
        Description: Specifies the instance type of the EC2 instance
        Type: String

    TopicARN:
        Description: The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic
        Type: String


Resources:

  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - UdacityS3ReadOnlyEC2

  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |         
          #!/bin/bash
          apt-get update -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          echo "it works! Udagram, Udacity" > index.html
      ImageId:
        !Sub "${ImageId}"
      SecurityGroups:
      - Ref: WebServerSecGroup
      InstanceType:
        !Sub "${InstanceType}"
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '4'
      MaxSize: '5'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup
      NotificationConfigurations:
      - TopicARN:
          !Sub "${TopicARN}"
        NotificationTypes:
        - autoscaling:EC2_INSTANCE_LAUNCH
        - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
        - autoscaling:EC2_INSTANCE_TERMINATE
        - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
        - autoscaling:TEST_NOTIFICATION

  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LBSecGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP

  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 35
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"

  CPUTooHighAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Average CPU utilization over last 10 minutes higher than 80%
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Statistic: Average
      Period: 600
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 80
      Dimensions:
      - Name: AutoScalingGroup
        Value: !Ref WebAppGroup

Outputs: 

    LoadBalancerDNS:
        Description: Public URL of the Load Balancer
        Value: http://http://udagr-webap-mmrmr2lbi7fq-1700353046.us-west-2.elb.amazonaws.com/
        Export:
          Name: !Sub "${EnvironmentName}-LB-DNS"

    LBSecGroup: 
        Description: Load Balancer Security Group
        Value: !Ref LBSecGroup
        Export:
          Name: !Sub "${EnvironmentName}-LB-SG"

    WebServerSecGroup: 
        Description: Web Server Security Group
        Value: !Ref WebServerSecGroup
        Export:
          Name: !Sub "${EnvironmentName}-WS-SG"

    SecurityGroups:
        Description: A list of the Security Groups
        Value: !Join [ ",", [ !Ref LBSecGroup, !Ref WebServerSecGroup ]]
        Export:
          Name: !Sub "${EnvironmentName}-SG"
